// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.2
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "adder.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic adder::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic adder::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<3> adder::ap_ST_st1_fsm_0 = "1";
const sc_lv<3> adder::ap_ST_st2_fsm_1 = "10";
const sc_lv<3> adder::ap_ST_st3_fsm_2 = "100";
const sc_lv<32> adder::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> adder::ap_const_lv1_1 = "1";
const sc_lv<32> adder::ap_const_lv32_1 = "1";
const sc_lv<1> adder::ap_const_lv1_0 = "0";
const int adder::C_S_AXI_DATA_WIDTH = "100000";
const sc_lv<3> adder::ap_const_lv3_0 = "000";
const sc_lv<3> adder::ap_const_lv3_5 = "101";
const sc_lv<3> adder::ap_const_lv3_1 = "1";
const sc_lv<32> adder::ap_const_lv32_2 = "10";

adder::adder(sc_module_name name) : sc_module(name), mVcdFile(0) {
    adder_AXILiteS_s_axi_U = new adder_AXILiteS_s_axi<C_S_AXI_AXILITES_ADDR_WIDTH,C_S_AXI_AXILITES_DATA_WIDTH>("adder_AXILiteS_s_axi_U");
    adder_AXILiteS_s_axi_U->AWVALID(s_axi_AXILiteS_AWVALID);
    adder_AXILiteS_s_axi_U->AWREADY(s_axi_AXILiteS_AWREADY);
    adder_AXILiteS_s_axi_U->AWADDR(s_axi_AXILiteS_AWADDR);
    adder_AXILiteS_s_axi_U->WVALID(s_axi_AXILiteS_WVALID);
    adder_AXILiteS_s_axi_U->WREADY(s_axi_AXILiteS_WREADY);
    adder_AXILiteS_s_axi_U->WDATA(s_axi_AXILiteS_WDATA);
    adder_AXILiteS_s_axi_U->WSTRB(s_axi_AXILiteS_WSTRB);
    adder_AXILiteS_s_axi_U->ARVALID(s_axi_AXILiteS_ARVALID);
    adder_AXILiteS_s_axi_U->ARREADY(s_axi_AXILiteS_ARREADY);
    adder_AXILiteS_s_axi_U->ARADDR(s_axi_AXILiteS_ARADDR);
    adder_AXILiteS_s_axi_U->RVALID(s_axi_AXILiteS_RVALID);
    adder_AXILiteS_s_axi_U->RREADY(s_axi_AXILiteS_RREADY);
    adder_AXILiteS_s_axi_U->RDATA(s_axi_AXILiteS_RDATA);
    adder_AXILiteS_s_axi_U->RRESP(s_axi_AXILiteS_RRESP);
    adder_AXILiteS_s_axi_U->BVALID(s_axi_AXILiteS_BVALID);
    adder_AXILiteS_s_axi_U->BREADY(s_axi_AXILiteS_BREADY);
    adder_AXILiteS_s_axi_U->BRESP(s_axi_AXILiteS_BRESP);
    adder_AXILiteS_s_axi_U->ACLK(ap_clk);
    adder_AXILiteS_s_axi_U->ARESET(ap_rst_n_inv);
    adder_AXILiteS_s_axi_U->ACLK_EN(ap_var_for_const0);
    adder_AXILiteS_s_axi_U->ap_start(ap_start);
    adder_AXILiteS_s_axi_U->interrupt(interrupt);
    adder_AXILiteS_s_axi_U->ap_ready(ap_ready);
    adder_AXILiteS_s_axi_U->ap_done(ap_done);
    adder_AXILiteS_s_axi_U->ap_idle(ap_idle);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_sig_cseq_ST_st3_fsm_2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_sig_cseq_ST_st3_fsm_2 );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_ap_sig_145);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_20);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_41);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_88);
    sensitive << ( inStream_TVALID );
    sensitive << ( exitcond_fu_73_p2 );

    SC_METHOD(thread_ap_sig_cseq_ST_st1_fsm_0);
    sensitive << ( ap_sig_20 );

    SC_METHOD(thread_ap_sig_cseq_ST_st2_fsm_1);
    sensitive << ( ap_sig_41 );

    SC_METHOD(thread_ap_sig_cseq_ST_st3_fsm_2);
    sensitive << ( ap_sig_145 );

    SC_METHOD(thread_ap_sig_ioackin_outStream_TREADY);
    sensitive << ( outStream_TREADY );
    sensitive << ( ap_reg_ioackin_outStream_TREADY );

    SC_METHOD(thread_exitcond_fu_73_p2);
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );
    sensitive << ( exitcond_fu_73_p2 );
    sensitive << ( ap_sig_88 );
    sensitive << ( ap_sig_ioackin_outStream_TREADY );
    sensitive << ( i_reg_58 );

    SC_METHOD(thread_i_1_fu_79_p2);
    sensitive << ( i_reg_58 );

    SC_METHOD(thread_i_cast1_fu_69_p1);
    sensitive << ( i_reg_58 );

    SC_METHOD(thread_inStream_TDATA_blk_n);
    sensitive << ( inStream_TVALID );
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );
    sensitive << ( exitcond_fu_73_p2 );

    SC_METHOD(thread_inStream_TREADY);
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );
    sensitive << ( exitcond_fu_73_p2 );
    sensitive << ( ap_sig_88 );
    sensitive << ( ap_sig_ioackin_outStream_TREADY );

    SC_METHOD(thread_outStream_TDATA);
    sensitive << ( inStream_TDATA );
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );
    sensitive << ( exitcond_fu_73_p2 );
    sensitive << ( ap_sig_88 );
    sensitive << ( i_cast1_fu_69_p1 );

    SC_METHOD(thread_outStream_TDATA_blk_n);
    sensitive << ( outStream_TREADY );
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );
    sensitive << ( exitcond_fu_73_p2 );

    SC_METHOD(thread_outStream_TLAST);
    sensitive << ( inStream_TLAST );
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );
    sensitive << ( exitcond_fu_73_p2 );
    sensitive << ( ap_sig_88 );

    SC_METHOD(thread_outStream_TVALID);
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );
    sensitive << ( exitcond_fu_73_p2 );
    sensitive << ( ap_sig_88 );
    sensitive << ( ap_reg_ioackin_outStream_TREADY );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( exitcond_fu_73_p2 );
    sensitive << ( ap_sig_88 );
    sensitive << ( ap_sig_ioackin_outStream_TREADY );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    ap_CS_fsm = "001";
    ap_reg_ioackin_outStream_TREADY = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "adder_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, inStream_TDATA, "(port)inStream_TDATA");
    sc_trace(mVcdFile, inStream_TVALID, "(port)inStream_TVALID");
    sc_trace(mVcdFile, inStream_TREADY, "(port)inStream_TREADY");
    sc_trace(mVcdFile, inStream_TLAST, "(port)inStream_TLAST");
    sc_trace(mVcdFile, outStream_TDATA, "(port)outStream_TDATA");
    sc_trace(mVcdFile, outStream_TVALID, "(port)outStream_TVALID");
    sc_trace(mVcdFile, outStream_TREADY, "(port)outStream_TREADY");
    sc_trace(mVcdFile, outStream_TLAST, "(port)outStream_TLAST");
    sc_trace(mVcdFile, s_axi_AXILiteS_AWVALID, "(port)s_axi_AXILiteS_AWVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_AWREADY, "(port)s_axi_AXILiteS_AWREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_AWADDR, "(port)s_axi_AXILiteS_AWADDR");
    sc_trace(mVcdFile, s_axi_AXILiteS_WVALID, "(port)s_axi_AXILiteS_WVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_WREADY, "(port)s_axi_AXILiteS_WREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_WDATA, "(port)s_axi_AXILiteS_WDATA");
    sc_trace(mVcdFile, s_axi_AXILiteS_WSTRB, "(port)s_axi_AXILiteS_WSTRB");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARVALID, "(port)s_axi_AXILiteS_ARVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARREADY, "(port)s_axi_AXILiteS_ARREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARADDR, "(port)s_axi_AXILiteS_ARADDR");
    sc_trace(mVcdFile, s_axi_AXILiteS_RVALID, "(port)s_axi_AXILiteS_RVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_RREADY, "(port)s_axi_AXILiteS_RREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_RDATA, "(port)s_axi_AXILiteS_RDATA");
    sc_trace(mVcdFile, s_axi_AXILiteS_RRESP, "(port)s_axi_AXILiteS_RRESP");
    sc_trace(mVcdFile, s_axi_AXILiteS_BVALID, "(port)s_axi_AXILiteS_BVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_BREADY, "(port)s_axi_AXILiteS_BREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_BRESP, "(port)s_axi_AXILiteS_BRESP");
    sc_trace(mVcdFile, interrupt, "(port)interrupt");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, ap_start, "ap_start");
    sc_trace(mVcdFile, ap_done, "ap_done");
    sc_trace(mVcdFile, ap_idle, "ap_idle");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st1_fsm_0, "ap_sig_cseq_ST_st1_fsm_0");
    sc_trace(mVcdFile, ap_sig_20, "ap_sig_20");
    sc_trace(mVcdFile, ap_ready, "ap_ready");
    sc_trace(mVcdFile, inStream_TDATA_blk_n, "inStream_TDATA_blk_n");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st2_fsm_1, "ap_sig_cseq_ST_st2_fsm_1");
    sc_trace(mVcdFile, ap_sig_41, "ap_sig_41");
    sc_trace(mVcdFile, exitcond_fu_73_p2, "exitcond_fu_73_p2");
    sc_trace(mVcdFile, outStream_TDATA_blk_n, "outStream_TDATA_blk_n");
    sc_trace(mVcdFile, i_1_fu_79_p2, "i_1_fu_79_p2");
    sc_trace(mVcdFile, ap_sig_88, "ap_sig_88");
    sc_trace(mVcdFile, ap_sig_ioackin_outStream_TREADY, "ap_sig_ioackin_outStream_TREADY");
    sc_trace(mVcdFile, i_reg_58, "i_reg_58");
    sc_trace(mVcdFile, ap_reg_ioackin_outStream_TREADY, "ap_reg_ioackin_outStream_TREADY");
    sc_trace(mVcdFile, i_cast1_fu_69_p1, "i_cast1_fu_69_p1");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st3_fsm_2, "ap_sig_cseq_ST_st3_fsm_2");
    sc_trace(mVcdFile, ap_sig_145, "ap_sig_145");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("adder.hdltvin.dat");
    mHdltvoutHandle.open("adder.hdltvout.dat");
}

adder::~adder() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete adder_AXILiteS_s_axi_U;
}

void adder::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void adder::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_st1_fsm_0;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_ioackin_outStream_TREADY = ap_const_logic_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) && 
              esl_seteq<1,1,1>(exitcond_fu_73_p2.read(), ap_const_lv1_0) && 
              !(ap_sig_88.read() || (esl_seteq<1,1,1>(exitcond_fu_73_p2.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_outStream_TREADY.read())))))) {
            ap_reg_ioackin_outStream_TREADY = ap_const_logic_0;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) && 
                     esl_seteq<1,1,1>(exitcond_fu_73_p2.read(), ap_const_lv1_0) && 
                     !ap_sig_88.read() && 
                     esl_seteq<1,1,1>(ap_const_logic_1, outStream_TREADY.read())))) {
            ap_reg_ioackin_outStream_TREADY = ap_const_logic_1;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) && 
         esl_seteq<1,1,1>(exitcond_fu_73_p2.read(), ap_const_lv1_0) && 
         !(ap_sig_88.read() || (esl_seteq<1,1,1>(exitcond_fu_73_p2.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_outStream_TREADY.read()))))) {
        i_reg_58 = i_1_fu_79_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && 
                !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
        i_reg_58 = ap_const_lv3_0;
    }
}

void adder::thread_ap_done() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read())) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void adder::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void adder::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void adder::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void adder::thread_ap_sig_145() {
    ap_sig_145 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(2, 2));
}

void adder::thread_ap_sig_20() {
    ap_sig_20 = esl_seteq<1,1,1>(ap_CS_fsm.read().range(0, 0), ap_const_lv1_1);
}

void adder::thread_ap_sig_41() {
    ap_sig_41 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(1, 1));
}

void adder::thread_ap_sig_88() {
    ap_sig_88 = (esl_seteq<1,1,1>(exitcond_fu_73_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(inStream_TVALID.read(), ap_const_logic_0));
}

void adder::thread_ap_sig_cseq_ST_st1_fsm_0() {
    if (ap_sig_20.read()) {
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    }
}

void adder::thread_ap_sig_cseq_ST_st2_fsm_1() {
    if (ap_sig_41.read()) {
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_0;
    }
}

void adder::thread_ap_sig_cseq_ST_st3_fsm_2() {
    if (ap_sig_145.read()) {
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_0;
    }
}

void adder::thread_ap_sig_ioackin_outStream_TREADY() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_outStream_TREADY.read())) {
        ap_sig_ioackin_outStream_TREADY = outStream_TREADY.read();
    } else {
        ap_sig_ioackin_outStream_TREADY = ap_const_logic_1;
    }
}

void adder::thread_exitcond_fu_73_p2() {
    exitcond_fu_73_p2 = (!i_reg_58.read().is_01() || !ap_const_lv3_5.is_01())? sc_lv<1>(): sc_lv<1>(i_reg_58.read() == ap_const_lv3_5);
}

void adder::thread_i_1_fu_79_p2() {
    i_1_fu_79_p2 = (!i_reg_58.read().is_01() || !ap_const_lv3_1.is_01())? sc_lv<3>(): (sc_biguint<3>(i_reg_58.read()) + sc_biguint<3>(ap_const_lv3_1));
}

void adder::thread_i_cast1_fu_69_p1() {
    i_cast1_fu_69_p1 = esl_zext<32,3>(i_reg_58.read());
}

void adder::thread_inStream_TDATA_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) && 
         esl_seteq<1,1,1>(exitcond_fu_73_p2.read(), ap_const_lv1_0))) {
        inStream_TDATA_blk_n = inStream_TVALID.read();
    } else {
        inStream_TDATA_blk_n = ap_const_logic_1;
    }
}

void adder::thread_inStream_TREADY() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) && 
          esl_seteq<1,1,1>(exitcond_fu_73_p2.read(), ap_const_lv1_0) && 
          !(ap_sig_88.read() || (esl_seteq<1,1,1>(exitcond_fu_73_p2.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_outStream_TREADY.read())))))) {
        inStream_TREADY = ap_const_logic_1;
    } else {
        inStream_TREADY = ap_const_logic_0;
    }
}

void adder::thread_outStream_TDATA() {
    outStream_TDATA = (!inStream_TDATA.read().is_01() || !i_cast1_fu_69_p1.read().is_01())? sc_lv<32>(): (sc_biguint<32>(inStream_TDATA.read()) + sc_biguint<32>(i_cast1_fu_69_p1.read()));
}

void adder::thread_outStream_TDATA_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) && 
         esl_seteq<1,1,1>(exitcond_fu_73_p2.read(), ap_const_lv1_0))) {
        outStream_TDATA_blk_n = outStream_TREADY.read();
    } else {
        outStream_TDATA_blk_n = ap_const_logic_1;
    }
}

void adder::thread_outStream_TLAST() {
    outStream_TLAST = inStream_TLAST.read();
}

void adder::thread_outStream_TVALID() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) && 
          esl_seteq<1,1,1>(exitcond_fu_73_p2.read(), ap_const_lv1_0) && 
          !ap_sig_88.read() && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_outStream_TREADY.read())))) {
        outStream_TVALID = ap_const_logic_1;
    } else {
        outStream_TVALID = ap_const_logic_0;
    }
}

void adder::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if (!esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) {
                ap_NS_fsm = ap_ST_st2_fsm_1;
            } else {
                ap_NS_fsm = ap_ST_st1_fsm_0;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(exitcond_fu_73_p2.read(), ap_const_lv1_0) && !(ap_sig_88.read() || (esl_seteq<1,1,1>(exitcond_fu_73_p2.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_outStream_TREADY.read()))))) {
                ap_NS_fsm = ap_ST_st2_fsm_1;
            } else if ((!(ap_sig_88.read() || (esl_seteq<1,1,1>(exitcond_fu_73_p2.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_outStream_TREADY.read()))) && !esl_seteq<1,1,1>(exitcond_fu_73_p2.read(), ap_const_lv1_0))) {
                ap_NS_fsm = ap_ST_st3_fsm_2;
            } else {
                ap_NS_fsm = ap_ST_st2_fsm_1;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_st1_fsm_0;
            break;
        default : 
            ap_NS_fsm = "XXX";
            break;
    }
}

void adder::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"inStream_TDATA\" :  \"" << inStream_TDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"inStream_TVALID\" :  \"" << inStream_TVALID.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"inStream_TREADY\" :  \"" << inStream_TREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"inStream_TLAST\" :  \"" << inStream_TLAST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"outStream_TDATA\" :  \"" << outStream_TDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"outStream_TVALID\" :  \"" << outStream_TVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"outStream_TREADY\" :  \"" << outStream_TREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"outStream_TLAST\" :  \"" << outStream_TLAST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_AWVALID\" :  \"" << s_axi_AXILiteS_AWVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_AWREADY\" :  \"" << s_axi_AXILiteS_AWREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_AWADDR\" :  \"" << s_axi_AXILiteS_AWADDR.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WVALID\" :  \"" << s_axi_AXILiteS_WVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_WREADY\" :  \"" << s_axi_AXILiteS_WREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WDATA\" :  \"" << s_axi_AXILiteS_WDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WSTRB\" :  \"" << s_axi_AXILiteS_WSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_ARVALID\" :  \"" << s_axi_AXILiteS_ARVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_ARREADY\" :  \"" << s_axi_AXILiteS_ARREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_ARADDR\" :  \"" << s_axi_AXILiteS_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RVALID\" :  \"" << s_axi_AXILiteS_RVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_RREADY\" :  \"" << s_axi_AXILiteS_RREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RDATA\" :  \"" << s_axi_AXILiteS_RDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RRESP\" :  \"" << s_axi_AXILiteS_RRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_BVALID\" :  \"" << s_axi_AXILiteS_BVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_BREADY\" :  \"" << s_axi_AXILiteS_BREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_BRESP\" :  \"" << s_axi_AXILiteS_BRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"interrupt\" :  \"" << interrupt.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

