#include "dedup.h"

#include <iostream>
#include <fstream>

#include <cstring>
#include <cstdlib>
#include <cstdint>
#include <cstdio>

uint32_t
murmurhash2 (const char key[2048], uint32_t len, uint32_t seed) {
  uint32_t c1 = 0xcc9e2d51;
  uint32_t c2 = 0x1b873593;
  uint32_t r1 = 15;
  uint32_t r2 = 13;
  uint32_t m = 5;
  uint32_t n = 0xe6546b64;
  uint32_t h = 0;
  uint32_t k = 0;
  uint8_t *d = (uint8_t *) key; // 32 bit extract from `key'
  const uint32_t *chunks = NULL;
  const uint8_t *tail = NULL; // tail - last 8 bytes
  int i = 0;
  int l = len / 4; // chunk length

  h = seed;

  chunks = (const uint32_t *) (d + l * 4); // body
  tail = (const uint8_t *) (d + l * 4); // last 8 byte chunk of `key'

  // for each 4 byte chunk of `key'
  for (i = -l; i != 0; ++i) {
//#pragma HLS UNROLL factor=15
#pragma HLS PIPELINE
    // next 4 byte chunk of `key'
    k = chunks[i];

    // encode next 4 byte chunk of `key'
    k *= c1;
    k = (k << r1) | (k >> (32 - r1));
    k *= c2;

    // append to hash
    h ^= k;
    h = (h << r2) | (h >> (32 - r2));
    h = h * m + n;
  }

  k = 0;

  // remainder
  switch (len & 3) { // `len % 4'
    case 3: k ^= (tail[2] << 16);
    case 2: k ^= (tail[1] << 8);

    case 1:
      k ^= tail[0];
      k *= c1;
      k = (k << r1) | (k >> (32 - r1));
      k *= c2;
      h ^= k;
  }

  h ^= len;

  h ^= (h >> 16);
  h *= 0x85ebca6b;
  h ^= (h >> 13);
  h *= 0xc2b2ae35;
  h ^= (h >> 16);

  return h;
}

using namespace std;

int main(){
/*
	char ar[2048] = {
			'1','2','3','4','5','6','7','8','9','0','a','b',
			'1','2','3','4','5','6','7','8','9','0','a','b',
			'1','2','3','4','5','6','7','8','9','0','a','b',
			'1','2','3','4','5','6','7','8','9','0','a','b',
			'1','2','3','4','5','6','7','8','9','0','a','b',
			'1','2','3','4','5','6','7','8','9','0','a','b',
			'1','2','3','4','5','6','7','8','9','0','a','b',
			'1','2','3','4','5','6','7','8','9','0','a','b',
			'1','2','3','4','5','6','7','8','9','0','a','b',
			'1','2','3','4','5','6','7','8','9','0','a','b',
			'1','2','3','4','5','6','7','8','9','0','a','b',
			'1','2','3','4','5','6','7','8','9','0','a','b',
			'1','2','3','4','5','6','7','8','9','0','a','b',
			'1','2','3','4','5','6','7','8','9','0','a','b',
			'1','2','3','4','5','6','7','8','9','0','a','b',
			'1','2','3','4','5','6','7','8','9','0','a','b',
			'1','2','3','4','5','6','7','8','9','0','a','b',
			'1','2','3','4','5','6','7','8','9','0','a','b',
			'1','2','3','4','5','6','7','8','9','0','a','b',
			'1','2','3','4','5','6','7','8','9','0','a','b',
			'1','2','3','4','5','6','7','8','9','0','a','b',
			'1','2','3','4','5','6','7','8','9','0','a','b',
			'1','2','3','4','5','6','7','8','9','0','a','b',
			'1','2','3','4','5','6','7','8','9','0','a','b',
			'1','2','3','4','5','6','7','8','9','0','a','b',
			'1','2','3','4','5','6','7','8','9','0','a','b',
			'1','2','3','4','5','6','7','8','9','0','a','b',
			'1','2','3','4','5','6','7','8','9','0','a','b',
			'1','2','3','4','5','6','7','8','9','0','a','b',
			'1','2','3','4','5','6','7','8','9','0','a','b',
			'1','2','3','4','5','6','7','8','9','0','a','b',
			'1','2','3','4','5','6','7','8','9','0','a','b',
			'1','2','3','4','5','6','7','8','9','0','a','b',
			'1','2','3','4','5','6','7','8','9','0','a','b',
			'1','2','3','4','5','6','7','8','9','0','a','b',
			'1','2','3','4','5','6','7','8','9','0','a','b',
			'1','2','3','4','5','6','7','8','9','0','a','b',
			'1','2','3','4','5','6','7','8','9','0','a','b',
			'1','2','3','4','5','6','7','8','9','0','a','b',
			'1','2','3','4','5','6','7','8','9','0','a','b',
			'1','2','3','4','5','6','7','8','9','0','a','b',
			'1','2','3','4','5','6','7','8','9','0','a','b',
			'1','2','3','4','5','6','7','8','9','0','a','b',
			'1','2','3','4','5','6','7','8','9','0','a','b',
			'1','2','3','4','5','6','7','8','9','0','a','b',
			'1','2','3','4','5','6','7','8','9','0','a','b',
			'1','2','3','4','5','6','7','8','9','0','a','b',
			'1','2','3','4','5','6','7','8','9','0','a','b',
			'1','2','3','4','5','6','7','8','9','0','a','b',
			'1','2','3','4','5','6','7','8','9','0','a','b',
			};
			*/

	ifstream stream;
	stream.open("/home/insujang/example", ios::in|ios::binary);

	char buffer[8192];
	stream.read(buffer, 8192);
	stream.close();


	hls::stream<char> inputStream;
	for(int i=0; i<8192; i++) inputStream.write(buffer[i]);
	hls::stream<ap_out> outputStream;

	dedup(inputStream, outputStream);

	using namespace std;
	for(int i=0; i<7; i++){
		ap_out result = outputStream.read();

		cout << "len: " << dec << result.data.index << endl;
		char out[33];
		snprintf(out, 32, "%08x%08x%08x%08x", result.data.hashData[0], result.data.hashData[1],
				result.data.hashData[2], result.data.hashData[3]);
		out[32] = '\0';

		cout << "hash " << i << ": " << string(out) << endl;
	}


//	uint32_t value = murmurhash2(ar, 12*30, 0);
//	uint32_t valueComp = murmurhash(&ar[0], 12*30, 0);
//
//	cout << "Value: " << value << endl << "HLS Value: " << valueComp << endl;
//
//	return value != valueComp;

	return 0;
}
